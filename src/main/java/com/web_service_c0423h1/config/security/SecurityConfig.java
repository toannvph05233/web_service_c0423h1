package com.web_service_c0423h1.config.security;import com.web_service_c0423h1.service.AccountService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.BeanIds;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.password.NoOpPasswordEncoder;@EnableWebSecuritypublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    AccountService accountService;    @Bean(BeanIds.AUTHENTICATION_MANAGER)    @Override    public AuthenticationManager authenticationManager() throws Exception {        return super.authenticationManager();    }    // cấu hinh xắc thực.    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(accountService).passwordEncoder(NoOpPasswordEncoder.getInstance());    }    // cấu hình phân quyền    @Override    protected void configure(HttpSecurity http) throws Exception {        http.authorizeRequests().antMatchers("/login").permitAll()                .and().authorizeRequests().antMatchers("/users**").hasAnyAuthority("ROLE_USER")                .and().authorizeRequests().antMatchers("/admins**").hasRole("ADMIN")                .and().authorizeRequests().anyRequest().authenticated()                .and().logout();        http.csrf().disable();    }}